generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum MissionStatus {
  in_progress
  completed
  failed
}

model User {
  id                  Int                 @id @default(autoincrement())
  email               String              @unique(map: "email") @db.VarChar(255)
  name                String              @db.VarChar(100)
  gender              String              @db.VarChar(15)
  birth               DateTime            @db.Date
  address             String              @db.VarChar(255)
  detailAddress       String?             @map("detail_address") @db.VarChar(255)
  phoneNumber         String              @map("phone_number") @db.VarChar(15)

  userFavorCategories UserFavorCategory[]
  reviews             Review[]
  missionChallenges   MissionChallenge[]

  @@map("user")
}

model FoodCategory {
  id                  Int                 @id @default(autoincrement())
  name                String              @db.VarChar(100)

  userFavorCategories UserFavorCategory[]

  @@map("food_category")
}

model UserFavorCategory {
  id             Int          @id @default(autoincrement())
  user           User         @relation(fields: [userId], references: [id])
  userId         Int          @map("user_id")
  foodCategory   FoodCategory @relation(fields: [foodCategoryId], references: [id])
  foodCategoryId Int          @map("food_category_id")

  @@index([foodCategoryId], map: "f_category_id")
  @@index([userId], map: "user_id")
  @@map("user_favor_category")
}

model Store {
  id         Int       @id @default(autoincrement())
  name       String    @db.VarChar(255)
  location   String?   @db.VarChar(255)
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @default(now()) @map("updated_at")

  reviews    Review[]
  missions   Mission[]

  @@map("store")
}

model Review {
  id         Int      @id @default(autoincrement())
  store      Store    @relation(fields: [storeId], references: [id])
  storeId    Int      @map("store_id")
  user       User     @relation(fields: [userId], references: [id])
  userId     Int      @map("user_id")
  content    String   @db.Text
  rating     Decimal  @db.Decimal(2, 1)
  createdAt  DateTime @default(now()) @map("created_at")

  @@map("review")
}

model Mission {
  id          Int                 @id @default(autoincrement())
  store       Store               @relation(fields: [storeId], references: [id])
  storeId     Int                 @map("store_id")
  description String              @db.VarChar(255)
  reward      Int?                @db.Int
  createdAt   DateTime            @default(now()) @map("created_at")

  challenges  MissionChallenge[]

  @@map("mission")
}

model MissionChallenge {
  id           Int            @id @default(autoincrement())
  mission      Mission        @relation(fields: [missionId], references: [id])
  missionId    Int            @map("mission_id")
  user         User           @relation(fields: [userId], references: [id])
  userId       Int            @map("user_id")
  status       MissionStatus   @default(in_progress)
  startedAt    DateTime       @default(now()) @map("started_at")
  completedAt  DateTime?      @map("completed_at")

  @@unique([missionId, userId])
  @@map("mission_challenge")
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String   @db.VarChar(512)
  expiresAt DateTime @map("expires_at")

  @@map("session")
}